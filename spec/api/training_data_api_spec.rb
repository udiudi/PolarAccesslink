=begin
#Polar Accesslink API

#Polar Accesslink API documentation

OpenAPI spec version: 3.59.0
Contact: b2bhelpdesk@polar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'spec_helper'
require 'json'

# Unit tests for PolarAccesslink::TrainingDataApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TrainingDataApi' do
  before do
    # run before each test
    @instance = PolarAccesslink::TrainingDataApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TrainingDataApi' do
    it 'should create an instance of TrainingDataApi' do
      expect(@instance).to be_instance_of(PolarAccesslink::TrainingDataApi)
    end
  end

  # unit tests for commit_exercise_transaction
  # Commit transaction
  # After successfully retrieving training session data within a transaction, partners are expected to commit the transaction.
  # @param transaction_id Transaction identifier
  # @param user_id User identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'commit_exercise_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_exercise_transaction
  # Create transaction
  # Check for new training data and create a new transaction if found.
  # @param user_id User identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_exercise_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_samples
  # Get available samples
  # Retrieve list of links to available samples in training session
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_available_samples test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_exercise_summary
  # Get exercise summary
  # Retrieve training session summary data
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_exercise_summary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_fit
  # Get FIT (beta)
  # Retrieve exercise in FIT format. **Note!** This interface is in beta phase. If there is anything we can help you with or you want to give us feedback, please contact [Support](#support).
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_fit test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_gpx
  # Get GPX
  # Retrieve training session summary data in GPX format
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :include_pause_times Whether to add pauses as part of the route. Default is false.
  # @return [nil]
  describe 'get_gpx test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_heart_rate_zones
  # Get heart rate zones
  # Retrieve heart rate zones in training session
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_heart_rate_zones test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_samples
  # Get samples
  # Retrieve sample data of given type
  # @param type_id Sample type id
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_samples test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tcx
  # Get TCX
  # Retrieve exercise in TCX format
  # @param user_id User identifier
  # @param transaction_id Transaction identifier
  # @param exercise_id Exercise identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_tcx test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_exercises
  # List exercises
  # After successfully initiating a transaction, training sessions included within it can be retrieved with the provided transactionId.
  # @param transaction_id Transaction identifier
  # @param user_id User identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'list_exercises test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
