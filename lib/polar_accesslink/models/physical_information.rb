=begin
#Polar Accesslink API

#Polar Accesslink API documentation

The version of the OpenAPI document: 3.40.0
Contact: b2bhelpdesk@polar.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'date'

module PolarAccesslink
  # User's physical information
  class PhysicalInformation
    # Physical information id
    attr_accessor :id

    # Id of the physical-information-transaction this training was transferred in
    attr_accessor :transaction_id

    # The time physical information was created in Accesslink, in format YYYY-MM-DDTHH:mm:ss.SSS
    attr_accessor :created

    # Absolute link to user owning the activity
    attr_accessor :polar_user

    # Height
    attr_accessor :weight

    # Height
    attr_accessor :height

    # Maximum heart rate
    attr_accessor :maximum_heart_rate

    # Resting hear rate
    attr_accessor :resting_heart_rate

    # Aerobic threshold
    attr_accessor :aerobic_threshold

    # Anaerobic threshold
    attr_accessor :anaerobic_threshold

    # VO2 max
    attr_accessor :vo2_max

    # Weight source
    attr_accessor :weight_source

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'transaction_id' => :'transaction-id',
        :'created' => :'created',
        :'polar_user' => :'polar-user',
        :'weight' => :'weight',
        :'height' => :'height',
        :'maximum_heart_rate' => :'maximum-heart-rate',
        :'resting_heart_rate' => :'resting-heart-rate',
        :'aerobic_threshold' => :'aerobic-threshold',
        :'anaerobic_threshold' => :'anaerobic-threshold',
        :'vo2_max' => :'vo2-max',
        :'weight_source' => :'weight-source'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'transaction_id' => :'Integer',
        :'created' => :'String',
        :'polar_user' => :'String',
        :'weight' => :'Float',
        :'height' => :'Float',
        :'maximum_heart_rate' => :'Integer',
        :'resting_heart_rate' => :'Integer',
        :'aerobic_threshold' => :'Integer',
        :'anaerobic_threshold' => :'Integer',
        :'vo2_max' => :'Integer',
        :'weight_source' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PolarAccesslink::PhysicalInformation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PolarAccesslink::PhysicalInformation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'polar_user')
        self.polar_user = attributes[:'polar_user']
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'maximum_heart_rate')
        self.maximum_heart_rate = attributes[:'maximum_heart_rate']
      end

      if attributes.key?(:'resting_heart_rate')
        self.resting_heart_rate = attributes[:'resting_heart_rate']
      end

      if attributes.key?(:'aerobic_threshold')
        self.aerobic_threshold = attributes[:'aerobic_threshold']
      end

      if attributes.key?(:'anaerobic_threshold')
        self.anaerobic_threshold = attributes[:'anaerobic_threshold']
      end

      if attributes.key?(:'vo2_max')
        self.vo2_max = attributes[:'vo2_max']
      end

      if attributes.key?(:'weight_source')
        self.weight_source = attributes[:'weight_source']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      weight_source_validator = EnumAttributeValidator.new('String', ["SOURCE_MEASURED", "SOURCE_USER"])
      return false unless weight_source_validator.valid?(@weight_source)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weight_source Object to be assigned
    def weight_source=(weight_source)
      validator = EnumAttributeValidator.new('String', ["SOURCE_MEASURED", "SOURCE_USER"])
      unless validator.valid?(weight_source)
        fail ArgumentError, "invalid value for \"weight_source\", must be one of #{validator.allowable_values}."
      end
      @weight_source = weight_source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          transaction_id == o.transaction_id &&
          created == o.created &&
          polar_user == o.polar_user &&
          weight == o.weight &&
          height == o.height &&
          maximum_heart_rate == o.maximum_heart_rate &&
          resting_heart_rate == o.resting_heart_rate &&
          aerobic_threshold == o.aerobic_threshold &&
          anaerobic_threshold == o.anaerobic_threshold &&
          vo2_max == o.vo2_max &&
          weight_source == o.weight_source
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, transaction_id, created, polar_user, weight, height, maximum_heart_rate, resting_heart_rate, aerobic_threshold, anaerobic_threshold, vo2_max, weight_source].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        PolarAccesslink.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
