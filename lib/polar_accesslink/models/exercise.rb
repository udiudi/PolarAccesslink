=begin
#Polar Accesslink API

#Polar Accesslink API documentation

The version of the OpenAPI document: 3.40.0
Contact: b2bhelpdesk@polar.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'date'

module PolarAccesslink
  # Training session summary data
  class Exercise
    # Id of the trainining session
    attr_accessor :id

    # Time of the transfer from wrist unit to Polar database
    attr_accessor :upload_time

    # Absolute link to Polar user owning the training
    attr_accessor :polar_user

    # Id of the exercise-transaction this training was transferred in
    attr_accessor :transaction_id

    # Polar product used in training
    attr_accessor :device

    # Start time of the training session in local time
    attr_accessor :start_time

    # The duration of the training session as specified in ISO8601
    attr_accessor :duration

    # Expended calories during training in kilocalories
    attr_accessor :calories

    # Distance in meters travelled during training
    attr_accessor :distance

    attr_accessor :heart_rate

    # Training load effect to user
    attr_accessor :training_load

    # Sport name
    attr_accessor :sport

    # Boolean indicating if the exercise has route data
    attr_accessor :has_route

    # Has value if the exercise is from \"Flow For Club\", otherwise not printed. Value -1 indicates that there were errors finding the club
    attr_accessor :club_id

    # Has value if the exercise is from \"Flow For Club\", otherwise not printed. Value \"Ambiguous club location. Please contact support.\" is printed in case of error (and the club-id is -1).
    attr_accessor :club_name

    # String containing the name of a Polar Flow-compatible sport, if one is set for the exercise.
    attr_accessor :detailed_sport_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'upload_time' => :'upload-time',
        :'polar_user' => :'polar-user',
        :'transaction_id' => :'transaction-id',
        :'device' => :'device',
        :'start_time' => :'start-time',
        :'duration' => :'duration',
        :'calories' => :'calories',
        :'distance' => :'distance',
        :'heart_rate' => :'heart-rate',
        :'training_load' => :'training-load',
        :'sport' => :'sport',
        :'has_route' => :'has-route',
        :'club_id' => :'club-id',
        :'club_name' => :'club-name',
        :'detailed_sport_info' => :'detailed-sport-info'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'upload_time' => :'String',
        :'polar_user' => :'String',
        :'transaction_id' => :'Integer',
        :'device' => :'String',
        :'start_time' => :'String',
        :'duration' => :'String',
        :'calories' => :'Integer',
        :'distance' => :'Float',
        :'heart_rate' => :'HeartRate',
        :'training_load' => :'Float',
        :'sport' => :'String',
        :'has_route' => :'Boolean',
        :'club_id' => :'Integer',
        :'club_name' => :'String',
        :'detailed_sport_info' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PolarAccesslink::Exercise` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PolarAccesslink::Exercise`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'upload_time')
        self.upload_time = attributes[:'upload_time']
      end

      if attributes.key?(:'polar_user')
        self.polar_user = attributes[:'polar_user']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'calories')
        self.calories = attributes[:'calories']
      end

      if attributes.key?(:'distance')
        self.distance = attributes[:'distance']
      end

      if attributes.key?(:'heart_rate')
        self.heart_rate = attributes[:'heart_rate']
      end

      if attributes.key?(:'training_load')
        self.training_load = attributes[:'training_load']
      end

      if attributes.key?(:'sport')
        self.sport = attributes[:'sport']
      end

      if attributes.key?(:'has_route')
        self.has_route = attributes[:'has_route']
      end

      if attributes.key?(:'club_id')
        self.club_id = attributes[:'club_id']
      end

      if attributes.key?(:'club_name')
        self.club_name = attributes[:'club_name']
      end

      if attributes.key?(:'detailed_sport_info')
        self.detailed_sport_info = attributes[:'detailed_sport_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          upload_time == o.upload_time &&
          polar_user == o.polar_user &&
          transaction_id == o.transaction_id &&
          device == o.device &&
          start_time == o.start_time &&
          duration == o.duration &&
          calories == o.calories &&
          distance == o.distance &&
          heart_rate == o.heart_rate &&
          training_load == o.training_load &&
          sport == o.sport &&
          has_route == o.has_route &&
          club_id == o.club_id &&
          club_name == o.club_name &&
          detailed_sport_info == o.detailed_sport_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, upload_time, polar_user, transaction_id, device, start_time, duration, calories, distance, heart_rate, training_load, sport, has_route, club_id, club_name, detailed_sport_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
