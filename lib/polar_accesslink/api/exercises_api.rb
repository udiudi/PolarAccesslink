=begin
#Polar Accesslink API

#Polar Accesslink API documentation

OpenAPI spec version: 3.59.0
Contact: b2bhelpdesk@polar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module PolarAccesslink
  class ExercisesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get exercise FIT
    # FIT file for users exercise.
    # @param exercise_id Hashed exercise id.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_exercise_fit_without_transaction(exercise_id, opts = {})
      get_exercise_fit_without_transaction_with_http_info(exercise_id, opts)
      nil
    end

    # Get exercise FIT
    # FIT file for users exercise.
    # @param exercise_id Hashed exercise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_exercise_fit_without_transaction_with_http_info(exercise_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExercisesApi.get_exercise_fit_without_transaction ...'
      end
      # verify the required parameter 'exercise_id' is set
      if @api_client.config.client_side_validation && exercise_id.nil?
        fail ArgumentError, "Missing the required parameter 'exercise_id' when calling ExercisesApi.get_exercise_fit_without_transaction"
      end
      # resource path
      local_var_path = '/v3/exercises/{exerciseId}/fit'.sub('{' + 'exerciseId' + '}', exercise_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExercisesApi#get_exercise_fit_without_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get exercise
    # Get users exercise using hashed id.
    # @param exercise_id Hashed exercise id.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_exercise_without_transaction(exercise_id, opts = {})
      get_exercise_without_transaction_with_http_info(exercise_id, opts)
      nil
    end

    # Get exercise
    # Get users exercise using hashed id.
    # @param exercise_id Hashed exercise id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_exercise_without_transaction_with_http_info(exercise_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExercisesApi.get_exercise_without_transaction ...'
      end
      # verify the required parameter 'exercise_id' is set
      if @api_client.config.client_side_validation && exercise_id.nil?
        fail ArgumentError, "Missing the required parameter 'exercise_id' when calling ExercisesApi.get_exercise_without_transaction"
      end
      # resource path
      local_var_path = '/v3/exercises/{exerciseId}'.sub('{' + 'exerciseId' + '}', exercise_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExercisesApi#get_exercise_without_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List exercises
    # List users exercises available in Accesslink.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def list_exercises_without_transaction(opts = {})
      list_exercises_without_transaction_with_http_info(opts)
      nil
    end

    # List exercises
    # List users exercises available in Accesslink.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def list_exercises_without_transaction_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExercisesApi.list_exercises_without_transaction ...'
      end
      # resource path
      local_var_path = '/v3/exercises'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExercisesApi#list_exercises_without_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
