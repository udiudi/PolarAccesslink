=begin
#Polar Accesslink API

#Polar Accesslink API documentation

OpenAPI spec version: 3.59.0
Contact: b2bhelpdesk@polar.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.16

=end

require 'uri'

module PolarAccesslink
  class PhysicalInfoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Commit transaction
    # After successfully retrieving physical information within a transaction, partners are expected to commit the transaction.
    # @param transaction_id Transaction identifier
    # @param user_id User identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def commit_physical_info_transaction(transaction_id, user_id, opts = {})
      commit_physical_info_transaction_with_http_info(transaction_id, user_id, opts)
      nil
    end

    # Commit transaction
    # After successfully retrieving physical information within a transaction, partners are expected to commit the transaction.
    # @param transaction_id Transaction identifier
    # @param user_id User identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def commit_physical_info_transaction_with_http_info(transaction_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhysicalInfoApi.commit_physical_info_transaction ...'
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling PhysicalInfoApi.commit_physical_info_transaction"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PhysicalInfoApi.commit_physical_info_transaction"
      end
      # resource path
      local_var_path = '/v3/users/{user-id}/physical-information-transactions/{transaction-id}'.sub('{' + 'transaction-id' + '}', transaction_id.to_s).sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhysicalInfoApi#commit_physical_info_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create transaction
    # Initiate physical info transaction. Check for new physical info and create a new transaction if found.
    # @param user_id User identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_physical_info_transaction(user_id, opts = {})
      create_physical_info_transaction_with_http_info(user_id, opts)
      nil
    end

    # Create transaction
    # Initiate physical info transaction. Check for new physical info and create a new transaction if found.
    # @param user_id User identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_physical_info_transaction_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhysicalInfoApi.create_physical_info_transaction ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PhysicalInfoApi.create_physical_info_transaction"
      end
      # resource path
      local_var_path = '/v3/users/{user-id}/physical-information-transactions'.sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhysicalInfoApi#create_physical_info_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get physical info
    # Get physical info entity data
    # @param user_id User identifier
    # @param transaction_id Transaction identifier
    # @param physical_info_id Physical information identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_physical_info(user_id, transaction_id, physical_info_id, opts = {})
      get_physical_info_with_http_info(user_id, transaction_id, physical_info_id, opts)
      nil
    end

    # Get physical info
    # Get physical info entity data
    # @param user_id User identifier
    # @param transaction_id Transaction identifier
    # @param physical_info_id Physical information identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_physical_info_with_http_info(user_id, transaction_id, physical_info_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhysicalInfoApi.get_physical_info ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PhysicalInfoApi.get_physical_info"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling PhysicalInfoApi.get_physical_info"
      end
      # verify the required parameter 'physical_info_id' is set
      if @api_client.config.client_side_validation && physical_info_id.nil?
        fail ArgumentError, "Missing the required parameter 'physical_info_id' when calling PhysicalInfoApi.get_physical_info"
      end
      # resource path
      local_var_path = '/v3/users/{user-id}/physical-information-transactions/{transaction-id}/physical-informations/{physical-info-id}'.sub('{' + 'user-id' + '}', user_id.to_s).sub('{' + 'transaction-id' + '}', transaction_id.to_s).sub('{' + 'physical-info-id' + '}', physical_info_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhysicalInfoApi#get_physical_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List physical infos
    # List new physical info data. After successfully initiating a transaction, physical infos included within it can be retrieved with the provided transactionId.
    # @param transaction_id Transaction identifier
    # @param user_id User identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def list_physical_infos(transaction_id, user_id, opts = {})
      list_physical_infos_with_http_info(transaction_id, user_id, opts)
      nil
    end

    # List physical infos
    # List new physical info data. After successfully initiating a transaction, physical infos included within it can be retrieved with the provided transactionId.
    # @param transaction_id Transaction identifier
    # @param user_id User identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def list_physical_infos_with_http_info(transaction_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhysicalInfoApi.list_physical_infos ...'
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling PhysicalInfoApi.list_physical_infos"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PhysicalInfoApi.list_physical_infos"
      end
      # resource path
      local_var_path = '/v3/users/{user-id}/physical-information-transactions/{transaction-id}'.sub('{' + 'transaction-id' + '}', transaction_id.to_s).sub('{' + 'user-id' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhysicalInfoApi#list_physical_infos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
